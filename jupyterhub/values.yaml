# values.yaml
proxy:
  secretToken: "9c1a5d2e5d8f1b3c4e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b"
  service:
    type: ClusterIP
  https:
    enabled: true
    type: letsencrypt
    letsencrypt:
      contactEmail: khoja1@ualberta.ca

hub:
  extraConfig:

    spawner: |
      import batchspawner
      from batchspawner import SlurmSpawner

      class CustomFormSpawner(SlurmSpawner):
          def _options_form_default(self):
              return """
              <div class="form-group">
                  <label for="req_cluster">Select a cluster</label>
                  <select name="req_cluster" required class="form-control">
                      <option value="polaris">Polaris</option>
                  </select>
              </div>

              <div class="form-group">
                  <label for="req_qos">Select a QoS</label>
                  <select name="req_qos" required class="form-control">
                      <option value="jupyterhub">Polaris</option>
                  </select>
              </div>

              <div class="form-group">
                  <label for="req_runtime">Specify runtime (HH:MM:SS format, 12hr max)</label>
                  <input name="req_runtime"
                         type="text"
                         class="form-control"
                         required
                         pattern="[01]{1}\d{1}:[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}"
                         value="05:00:00">
              </div>

              <div class="form-group">
                  <label for="req_nodes">Specify node count</label>
                  <input name="req_nodes"
                         type="number"
                         class="form-control"
                         required
                         min="1"
                         max="8"
                         value="1">
              </div>

              <div class="form-group">
                  <label for="req_ntasks">Specify tasks per node</label>
                  <input name="req_ntasks"
                         type="number"
                         class="form-control"
                         required
                         min="1"
                         max="20"
                         value="1">
              </div>
              """

          def options_from_form(self, formdata):
              options = {}
              options['cluster'] = formdata.get('req_cluster', ['polaris'])[0]
              options['qos'] = formdata.get('req_qos', ['jupyterhub'])[0]
              options['runtime'] = formdata.get('req_runtime', ['05:00:00'])[0]
              options['nodes'] = int(formdata.get('req_nodes', ['1'])[0])
              options['ntasks'] = int(formdata.get('req_ntasks', ['1'])[0])
              return options

          async def start(self):
              self.req_cluster = self.user_options.get('cluster', 'polaris')
              self.req_qos = self.user_options.get('qos', 'jupyterhub')
              self.req_runtime = self.user_options.get('runtime', '05:00:00')
              self.req_nodes = self.user_options.get('nodes', 1)
              self.req_ntasks = self.user_options.get('ntasks', 1)

              self.batch_script = f"""#!/bin/bash
              #SBATCH --job-name=jupyterhub
              #SBATCH --output=/home/{self.user.name}/jupyterhub_%j.log
              #SBATCH --error=/home/{self.user.name}/jupyterhub_%j.err
              #SBATCH --partition={self.req_cluster}
              #SBATCH --qos={self.req_qos}
              #SBATCH --nodes={self.req_nodes}
              #SBATCH --ntasks-per-node={self.req_ntasks}
              #SBATCH --time={self.req_runtime}

              module load anaconda
              source activate jupyter
              jupyter lab --no-browser --port={self.port} --ip=0.0.0.0
              """

              return await super().start()

      c.JupyterHub.spawner_class = CustomFormSpawner


  config:
    JupyterHub:
      admin_access: true
      log_level: DEBUG
      cleanup_servers: false
    Authenticator:
      admin_users:
        - khoja1
        - kali2
        - wwuser
    Spawner:
      default_url: '/lab'
      http_timeout: 300
      start_timeout: 300
      notebook_dir: '/'
    ConfigurableHTTPProxy:
      command: ["--no-x-forward"]

  extraVolumeMounts:
    - name: nfs-slurm-config
      mountPath: /etc/slurm
    - name: nfs-jupyterhub-config
      mountPath: /etc/jupyterhub

  extraVolumes:
    - name: nfs-slurm-config
      nfs:
        server: 192.168.1.1
        path: /disks/slurm/etc/slurm
    - name: nfs-jupyterhub-config
      nfs:
        server: 192.168.1.1
        path: /disks/slurm/etc/jupyterhub

singleuser:
  storage:
    type: "dynamic"
    dynamic:
      storageClass: "nfs-client"
  image:
    name: jupyter/base-notebook
    tag: latest
  defaultUrl: "/lab"
cull:
  enabled: true
